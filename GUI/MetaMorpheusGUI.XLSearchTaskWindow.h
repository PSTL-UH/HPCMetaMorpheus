#pragma once

#include <string>
#include <vector>
#include <limits>
#include <any>
#include <optional>

//C# TO C++ CONVERTER NOTE: Forward class declarations:
namespace TaskLayer { class XLSearchTask; }
namespace MetaMorpheusGUI { class DataContextForSearchTaskWindow; }
namespace MetaMorpheusGUI { class SearchModeForDataGrid; }
namespace MetaMorpheusGUI { class ModTypeForTreeView; }

using namespace EngineLayer;
using namespace EngineLayer::CrosslinkSearch;
using namespace MzLibUtil;
using namespace TaskLayer;
using namespace UsefulProteomicsDatabases;
using namespace Proteomics::ProteolyticDigestion;
using namespace MassSpectrometry;

namespace MetaMorpheusGUI
{
	/// <summary>
	/// Interaction logic for SearchTaskWindow.xaml
	/// </summary>
	class XLSearchTaskWindow : public Window
	{
	private:
		XLSearchTask *privateTheTask;

		DataContextForSearchTaskWindow *const DataContextForSearchTaskWindow;
		ObservableCollection<SearchModeForDataGrid*> *const SearchModesForThisTask = new ObservableCollection<SearchModeForDataGrid*>();
		ObservableCollection<ModTypeForTreeView*> *const FixedModTypeForTreeViewObservableCollection = new ObservableCollection<ModTypeForTreeView*>();
		ObservableCollection<ModTypeForTreeView*> *const VariableModTypeForTreeViewObservableCollection = new ObservableCollection<ModTypeForTreeView*>();

	public:
		virtual ~XLSearchTaskWindow()
		{
			delete DataContextForSearchTaskWindow;
			delete SearchModesForThisTask;
			delete FixedModTypeForTreeViewObservableCollection;
			delete VariableModTypeForTreeViewObservableCollection;
		}

		XLSearchTaskWindow();

		XLSearchTaskWindow(XLSearchTask *task);

		XLSearchTask *getTheTask() const;
		void setTheTask(XLSearchTask *value);

	private:
		void CheckIfNumber(std::any sender, TextCompositionEventArgs *e);

		void PopulateChoices();

		void UpdateFieldsFromTask(XLSearchTask *task);

		void CancelButton_Click(std::any sender, RoutedEventArgs *e);

		void SaveButton_Click(std::any sender, RoutedEventArgs *e);

		void ApmdExpander_Collapsed(std::any sender, RoutedEventArgs *e);

		void ModExpander_Expanded(std::any sender, RoutedEventArgs *e);

		void ModificationsDataGrid_Loaded(std::any sender, RoutedEventArgs *e);

		void ModificationsDataGrid_DataContextChanged(std::any sender, DependencyPropertyChangedEventArgs *e);

		void ModificationsDataGrid_AutoGeneratedColumns(std::any sender, EventArgs *e);

		void KeyPressed(std::any sender, KeyEventArgs *e);

		void TextChanged_Fixed(std::any sender, TextChangedEventArgs *args);

		void TextChanged_Var(std::any sender, TextChangedEventArgs *args);

		void TextChangeTimerHandler(std::any sender, EventArgs *e);
	};
}
